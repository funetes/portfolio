import { questionnaire, qusetRunner, meflix, wetube } from "./img";

export const projectsArr = [
  {
    src: qusetRunner.intro,
    images: [
      qusetRunner.signupAndLogin,
      qusetRunner.qeustRegister,
      qusetRunner.store,
      qusetRunner.darkmode,
      qusetRunner.achievement,
      qusetRunner.userInfo,
      qusetRunner.rank,
    ],
    title: "QuestRunner",
    position: "front-end",
    stack: ["React", "React-redux", "Typescript", "Material-UI"],
    gitHub: "https://github.com/funetes/QuestRunner-client-mirrored",
    description: [
      "TodoList와 Gamification이 융합되어진 서비스",
      "Material UI를 이용하여 Todo Data의 필터링, 페이지별 보기, 정렬 처리",
      "Redux Store에 기반한 User의 Credit을 사용하여, 상점의 Item 상태를 변경(구매, 구매함, 적용중)하여 유저가 가지는 아이템을 보여줄수 있도록 구현",
      "회원가입시 중복 Id check, Email validation, Password validation 처리",
      "Redux Store에 기반한 User darkmode data로 각 컴포넌트마다 Redux Store를 Subscribe 하여 dark mode 구현",
    ],
  },
  {
    src: questionnaire.intro,
    images: [
      questionnaire.siginup,
      questionnaire.login,
      questionnaire.createEvent,
      questionnaire.joinToEvent,
      questionnaire.registerQuestion,
    ],
    title: "Questionnaire",
    position: "back-end",
    stack: [
      "NodeJs",
      "Jwt",
      "SocketIO",
      "Mysql",
      "Sequelize",
      "AWS-RDS",
      "AWS-EC2",
    ],
    gitHub: "https://github.com/funetes/Questionnaire-Server-mirrored",
    description: [
      "익명 질문자 질의응답(Q&A) 서비스",
      "DB스키마 설계, 작성과 Mysql - Sequelize를 이용하여 DB Table 구성",
      "Jwt Token사용으로 별도의 저장소 없이 사용자 인증기능 구현",
      "실시간으로 질의응답과 좋아요가 가능하도록 Socket IO를 이용하여 구현",
      "Front-end 와 Back-end 전반에 걸쳐 Socket IO Endpoint Api 작성",
      "익명 사용자마다 고유한 값을 localStorage에 저장후, 해당 값을 DB Table 에 저장",
      "익명 사용자를 구별하여 좋아요 Toggle 구현",
      "AWS-RDS 배포로 클라우드 환경에서 DB 접근 가능하도록 구성",
    ],
  },
  {
    src: meflix.intro,
    images: [meflix.homeTVDeatil, meflix.search],
    title: "Meflix",
    position: "front-end",
    stack: ["React", "React-hooks", "Styled-componets"],
    gitHub: "https://github.com/funetes/netflixPractice",
    description: [
      "Netflix Clone",
      "Nomadcorders Clone Project",
      "Nexflix스타일의 영화목록과 tv목록을 보여주는 서비스",
      "외부 Api(The Movie Database (TMDb))에서 가지고온 movie, tv 정보를 이용, CSS Grid를 사용하여 UI 구성",
    ],
  },
  {
    src: wetube.intro,
    images: [
      wetube.loginWithGithub,
      wetube.showVideo,
      wetube.addDeleteComment,
      wetube.upload,
      wetube.search,
    ],
    title: "Wetube",
    position: "full-stack",
    stack: ["NodeJS", "MongoDB", "Pug(jade)"],
    description: [
      "Youtube Clone",
      "Momadcorders Clone Project",
      "Data Schema 구성, Data Relation, Cookie-Session 경험",
      "Video 삭제, 등록, 변경, 재생 Api 작성",
      "MVC Pattern을 사용하여 Server 기능을 구성",
      "Template Engine(pug)를 사용하여 별도 서버 분리 없이 Video와 댓글을 보여주는 View를 구성",
    ],
  },
];
